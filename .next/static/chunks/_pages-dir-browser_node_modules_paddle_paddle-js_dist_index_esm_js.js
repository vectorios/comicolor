"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_pages-dir-browser_node_modules_paddle_paddle-js_dist_index_esm_js"],{

/***/ "(pages-dir-browser)/./node_modules/@paddle/paddle-js/dist/index.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/@paddle/paddle-js/dist/index.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CheckoutEventNames: () => (/* binding */ CheckoutEventNames),\n/* harmony export */   CheckoutEventsPaymentMethodCardTypes: () => (/* binding */ CheckoutEventsPaymentMethodCardTypes),\n/* harmony export */   CheckoutEventsPaymentMethodTypes: () => (/* binding */ CheckoutEventsPaymentMethodTypes),\n/* harmony export */   CheckoutEventsStatus: () => (/* binding */ CheckoutEventsStatus),\n/* harmony export */   CheckoutEventsTimePeriodInterval: () => (/* binding */ CheckoutEventsTimePeriodInterval),\n/* harmony export */   getPaddleInstance: () => (/* binding */ getPaddleInstance),\n/* harmony export */   initializePaddle: () => (/* binding */ initializePaddle)\n/* harmony export */ });\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) {\n  try {\n    var i = n[a](c),\n      u = i.value;\n  } catch (n) {\n    return void e(n);\n  }\n  i.done ? t(u) : Promise.resolve(u).then(r, o);\n}\nfunction _asyncToGenerator(n) {\n  return function () {\n    var t = this,\n      e = arguments;\n    return new Promise(function (r, o) {\n      var a = n.apply(t, e);\n      function _next(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n      }\n      function _throw(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n      }\n      _next(void 0);\n    });\n  };\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var s = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (e.includes(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nfunction _regeneratorRuntime() {\n  _regeneratorRuntime = function () {\n    return e;\n  };\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function (t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function (t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(typeof e + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function (e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function () {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function (e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function (t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function (t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function (t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    catch: function (t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw Error(\"illegal catch attempt\");\n    },\n    delegateYield: function (e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\n\nvar Versions = {\n  CLASSIC: 'classic',\n  V1: 'v1'\n};\nvar DefaultVersion = Versions.V1;\nvar PaddleClassicCDNUrl = 'https://cdn.paddle.com/paddle/paddle.js';\nvar PaddleBillingCDNUrl = 'https://cdn.paddle.com/paddle/v2/paddle.js';\nvar PaddleClassicInfo = {\n  url: PaddleClassicCDNUrl\n};\nvar PaddleBillingV1Info = {\n  url: PaddleBillingCDNUrl\n};\n\nfunction findScript(cdnUrl) {\n  return document.querySelector(\"script[src=\\\"\".concat(cdnUrl, \"\\\"]\")) || undefined;\n}\nfunction injectScript(src) {\n  var script = document.createElement('script');\n  script.src = src;\n  var headOrBody = document.head || document.body;\n  if (!headOrBody) {\n    throw new Error('Cannot inject Paddle.js. It needs a <head> or <body> element.');\n  }\n  headOrBody.appendChild(script);\n  return script;\n}\nvar promiseMap = {\n  classic: undefined,\n  v1: undefined\n};\nvar VersionToPaddleMap = {\n  classic: 'PaddleClassic',\n  v1: 'PaddleBillingV1'\n};\nfunction loadFromCDN(version) {\n  var _getCDNInfoBasedOnVer;\n  var cdnUrl = (_getCDNInfoBasedOnVer = getCDNInfoBasedOnVersion(version)) === null || _getCDNInfoBasedOnVer === void 0 ? void 0 : _getCDNInfoBasedOnVer.url;\n  if (!cdnUrl) {\n    return;\n  }\n  // Return promise on re-renders\n  var existingPromise = promiseMap[version];\n  var paddleInstanceName = VersionToPaddleMap[version];\n  if (existingPromise !== undefined) {\n    return existingPromise;\n  }\n  promiseMap[version] = new Promise(function (resolve, reject) {\n    if (typeof window === 'undefined') {\n      // Return undefined in a server side environment\n      resolve(undefined);\n      return;\n    }\n    // Return Paddle instance if it is already initialized\n    if (window[paddleInstanceName]) {\n      resolve(window[paddleInstanceName]);\n      return;\n    }\n    try {\n      // Inject if paddle.js script tag is not found\n      var script = findScript(cdnUrl);\n      if (!script) {\n        script = injectScript(cdnUrl);\n      }\n      // Wait for `load` event before returning\n      script.addEventListener('load', function () {\n        if (window[paddleInstanceName]) {\n          resolve(window[paddleInstanceName]);\n        } else {\n          reject(new Error('Paddle.js not available'));\n        }\n      });\n      // Show an error if loading fails\n      script.addEventListener('error', function () {\n        reject(new Error(\"Failed to load Paddle.js - \".concat(version)));\n      });\n    } catch (error) {\n      reject(error);\n      return;\n    }\n  });\n  return promiseMap[version];\n}\nfunction getCDNInfoBasedOnVersion(version) {\n  if (version === Versions.CLASSIC) {\n    return PaddleClassicInfo;\n  }\n  if (version === Versions.V1) {\n    return PaddleBillingV1Info;\n  } else {\n    console.error('[Paddle] Unknown Paddle Version');\n    return;\n  }\n}\n\nvar _excluded = [\"environment\", \"version\"],\n  _excluded2 = [\"environment\", \"version\"];\nfunction initializePaddleBillingV1(options, paddle) {\n  var environment = options.environment;\n    options.version;\n    var rest = _objectWithoutProperties(options, _excluded);\n  try {\n    if (environment) {\n      paddle.Environment.set(environment);\n    }\n    if (paddle.Initialized) {\n      paddle.Update(_objectSpread2({}, rest));\n    } else {\n      paddle.Initialize(_objectSpread2({}, rest));\n    }\n  } catch (e) {\n    console.warn('[Paddle] Paddle Initialization failed. Please check the inputs', e);\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction initializePaddleClassic(options, paddle) {\n  var environment = options.environment;\n    options.version;\n    var rest = _objectWithoutProperties(options, _excluded2);\n  try {\n    if (environment) {\n      paddle.Environment.set(environment);\n    }\n    paddle.Setup(_objectSpread2({}, rest));\n  } catch (e) {\n    console.warn('[Paddle] Paddle Initialization failed. Please check the inputs', e);\n  }\n}\n\n// Note: The enums in this file is only for `src`. Typescript will also need it added to the `types` directory for usage.\nvar CheckoutEventNames;\n(function (CheckoutEventNames) {\n  CheckoutEventNames[\"CHECKOUT_LOADED\"] = \"checkout.loaded\";\n  CheckoutEventNames[\"CHECKOUT_CLOSED\"] = \"checkout.closed\";\n  CheckoutEventNames[\"CHECKOUT_UPDATED\"] = \"checkout.updated\";\n  CheckoutEventNames[\"CHECKOUT_COMPLETED\"] = \"checkout.completed\";\n  CheckoutEventNames[\"CHECKOUT_ERROR\"] = \"checkout.error\";\n  CheckoutEventNames[\"CHECKOUT_FAILED\"] = \"checkout.failed\";\n  CheckoutEventNames[\"CHECKOUT_ITEMS_UPDATED\"] = \"checkout.items.updated\";\n  CheckoutEventNames[\"CHECKOUT_ITEMS_REMOVED\"] = \"checkout.items.removed\";\n  CheckoutEventNames[\"CHECKOUT_CUSTOMER_CREATED\"] = \"checkout.customer.created\";\n  CheckoutEventNames[\"CHECKOUT_CUSTOMER_UPDATED\"] = \"checkout.customer.updated\";\n  CheckoutEventNames[\"CHECKOUT_CUSTOMER_REMOVED\"] = \"checkout.customer.removed\";\n  CheckoutEventNames[\"CHECKOUT_PAYMENT_SELECTED\"] = \"checkout.payment.selected\";\n  CheckoutEventNames[\"CHECKOUT_PAYMENT_INITIATED\"] = \"checkout.payment.initiated\";\n  CheckoutEventNames[\"CHECKOUT_PAYMENT_FAILED\"] = \"checkout.payment.failed\";\n  CheckoutEventNames[\"CHECKOUT_DISCOUNT_APPLIED\"] = \"checkout.discount.applied\";\n  CheckoutEventNames[\"CHECKOUT_DISCOUNT_REMOVED\"] = \"checkout.discount.removed\";\n})(CheckoutEventNames || (CheckoutEventNames = {}));\nvar CheckoutEventsTimePeriodInterval;\n(function (CheckoutEventsTimePeriodInterval) {\n  CheckoutEventsTimePeriodInterval[\"DAY\"] = \"day\";\n  CheckoutEventsTimePeriodInterval[\"WEEK\"] = \"week\";\n  CheckoutEventsTimePeriodInterval[\"MONTH\"] = \"month\";\n  CheckoutEventsTimePeriodInterval[\"YEAR\"] = \"year\";\n})(CheckoutEventsTimePeriodInterval || (CheckoutEventsTimePeriodInterval = {}));\nvar CheckoutEventsPaymentMethodTypes;\n(function (CheckoutEventsPaymentMethodTypes) {\n  CheckoutEventsPaymentMethodTypes[\"ALIPAY\"] = \"alipay\";\n  CheckoutEventsPaymentMethodTypes[\"APPLE_PAY\"] = \"apple-pay\";\n  CheckoutEventsPaymentMethodTypes[\"CARD\"] = \"card\";\n  CheckoutEventsPaymentMethodTypes[\"GOOGLE_PAY\"] = \"google-pay\";\n  CheckoutEventsPaymentMethodTypes[\"IDEAL\"] = \"ideal\";\n  CheckoutEventsPaymentMethodTypes[\"PAYPAL\"] = \"paypal\";\n  CheckoutEventsPaymentMethodTypes[\"WIRE_TRANSFER\"] = \"wire-transfer\";\n  CheckoutEventsPaymentMethodTypes[\"NONE\"] = \"none\";\n})(CheckoutEventsPaymentMethodTypes || (CheckoutEventsPaymentMethodTypes = {}));\nvar CheckoutEventsPaymentMethodCardTypes;\n(function (CheckoutEventsPaymentMethodCardTypes) {\n  CheckoutEventsPaymentMethodCardTypes[\"AMERICAN_EXPRESS\"] = \"american_express\";\n  CheckoutEventsPaymentMethodCardTypes[\"DINERS_CLUB\"] = \"diners_club\";\n  CheckoutEventsPaymentMethodCardTypes[\"DISCOVER\"] = \"discover\";\n  CheckoutEventsPaymentMethodCardTypes[\"JCB\"] = \"jcb\";\n  CheckoutEventsPaymentMethodCardTypes[\"MADA\"] = \"mada\";\n  CheckoutEventsPaymentMethodCardTypes[\"MAESTRO\"] = \"maestro\";\n  CheckoutEventsPaymentMethodCardTypes[\"MASTER_CARD\"] = \"mastercard\";\n  CheckoutEventsPaymentMethodCardTypes[\"UNION_PAY\"] = \"union_pay\";\n  CheckoutEventsPaymentMethodCardTypes[\"VISA\"] = \"visa\";\n  CheckoutEventsPaymentMethodCardTypes[\"UNKNOWN\"] = \"unknown\";\n})(CheckoutEventsPaymentMethodCardTypes || (CheckoutEventsPaymentMethodCardTypes = {}));\nvar CheckoutEventsStatus;\n(function (CheckoutEventsStatus) {\n  CheckoutEventsStatus[\"DRAFT\"] = \"draft\";\n  CheckoutEventsStatus[\"READY\"] = \"ready\";\n  CheckoutEventsStatus[\"COMPLETED\"] = \"completed\";\n  CheckoutEventsStatus[\"BILLED\"] = \"billed\";\n  CheckoutEventsStatus[\"canceled\"] = \"canceled\";\n  CheckoutEventsStatus[\"PAST_DUE\"] = \"past_due\";\n})(CheckoutEventsStatus || (CheckoutEventsStatus = {}));\n\nfunction initializePaddle(_x) {\n  return _initializePaddle.apply(this, arguments);\n}\nfunction _initializePaddle() {\n  _initializePaddle = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n    var requestedVersion, paddle;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          requestedVersion = (options === null || options === void 0 ? void 0 : options.version) || DefaultVersion;\n          _context.next = 3;\n          return loadFromCDN(requestedVersion);\n        case 3:\n          paddle = _context.sent;\n          if (!paddle) {\n            _context.next = 9;\n            break;\n          }\n          if (options) {\n            if (requestedVersion === Versions.V1) {\n              initializePaddleBillingV1(options, paddle);\n            } else if (requestedVersion === Versions.CLASSIC) {\n              initializePaddleClassic(options, paddle);\n            }\n          }\n          return _context.abrupt(\"return\", paddle);\n        case 9:\n          console.error('[Paddle] Error Loading Paddle');\n          return _context.abrupt(\"return\");\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _initializePaddle.apply(this, arguments);\n}\nfunction getPaddleInstance() {\n  var version = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DefaultVersion;\n  if (version === Versions.V1) {\n    return window.PaddleBillingV1;\n  } else if (version === Versions.CLASSIC) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return window.PaddleClassic;\n  } else {\n    console.error('[Paddle] Unknown Paddle Version');\n    return;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@paddle/paddle-js/dist/index.esm.js\n"));

/***/ })

}]);